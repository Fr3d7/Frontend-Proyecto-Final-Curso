pipeline {
    agent any

    stages {

        stage('Checkout') {
            steps {
                script {
                    // valor por defecto si BRANCH_NAME viene vac√≠o (pasa en jobs normales)
                    def branch = env.BRANCH_NAME ?: "DEV"
                    echo "üì• Haciendo checkout de la rama ${branch}"
                }
                checkout scm
            }
        }

        stage('Install dependencies') {
            steps {
                echo "üì¶ Instalando dependencias NPM..."
                // En Windows usamos bat, no sh
                bat 'npm install'
            }
        }

        stage('Run tests') {
            steps {
                echo "üß™ Corriendo tests (Jest/RTL)..."
                // --watchAll=false: desactiva modo watch
                // --ci: modo CI
                // --passWithNoTests: no truena si todav√≠a no hay archivos *.test.js
                bat 'npm test -- --watchAll=false --ci --passWithNoTests'
            }
            post {
                unsuccessful {
                    echo "‚ùå Fallaron las pruebas unitarias"
                }
                success {
                    echo "‚úÖ Pruebas unitarias OK"
                }
            }
        }

                stage('Build app') {
            steps {
                echo "üèó  Construyendo la app React (npm run build, ignorando warnings)..."
                // En Windows, para limpiar la variable de entorno CI solo en este paso:
                bat '''
                set CI=
                npm run build
                '''
            }
        }


        stage('SonarQube Analysis') {
            steps {
                echo "üîç Enviando an√°lisis a SonarQube..."

                // Usa la config de SonarQube que registraste en Jenkins (sonar-local)
                withSonarQubeEnv('sonar-local') {

                    // Saca el token de las credenciales seguras en Jenkins (ID: sonar-token)
                    withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {

                        script {
                            // Herramienta sonar-scanner configurada en Global Tool Configuration
                            def scannerHome = tool 'sonar-scanner-win'

                            // Ejecuta el escaneo
                            bat """
                                "${scannerHome}\\bin\\sonar-scanner.bat" ^
                                  -Dsonar.projectKey=frontend-proyecto-final ^
                                  -Dsonar.projectName=frontend-proyecto-final ^
                                  -Dsonar.sources=src ^
                                  -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info ^
                                  -Dsonar.host.url=%http://localhost:9000% ^
                                  -Dsonar.login=%sqa_d88c9d69aaa3b92fdfa0cb421dc1a7663c167d31%
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                def branch = env.BRANCH_NAME ?: "DEV"
                echo "‚úÖ Pipeline OK en rama ${branch}"
            }
        }
        failure {
            script {
                def branch = env.BRANCH_NAME ?: "DEV"
                echo "‚ùå Fall√≥ el pipeline en rama ${branch}"
            }
        }
    }
}
