pipeline {
    agent any

    stages {

        stage('Checkout') {
            steps {
                script {
                    echo "üì• Haciendo checkout de la rama ${env.BRANCH_NAME}"
                }
                checkout scm
            }
        }

        stage('Install dependencies') {
            steps {
                echo "üì¶ Instalando dependencias NPM..."
                bat 'npm install'
            }
        }

        stage('Run tests') {
            steps {
                echo "üß™ Corriendo tests (Jest/RTL)..."
                // --passWithNoTests evita que falle si no hay pruebas a√∫n
                bat 'npm test -- --watchAll=false --ci --passWithNoTests'
            }
            post {
                success {
                    echo "‚úÖ Pruebas unitarias OK"
                }
                unsuccessful {
                    echo "‚ùå Fallaron las pruebas unitarias"
                }
            }
        }

        stage('Build app') {
            steps {
                echo "üèó  Construyendo la app React (npm run build, ignorando warnings)..."
                // truco: en React CRA, si CI est√° vac√≠o, los warnings no rompen el build
                bat '''
                    set CI=
                    npm run build
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo "üîç Enviando an√°lisis a SonarQube..."

                // usa la config de SonarQube que agregaste en Manage Jenkins > Configure System
                // nombre: sonar-local  (DEBE coincidir exactamente)
                withSonarQubeEnv('sonar-local') {

                    // Inyecta el token guardado en Credentials (ID: sonarqube-token)
                    withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {

                        // usamos la instalaci√≥n del sonar-scanner que definiste en Global Tool Configuration
                        // yo lo voy a llamar sonar-scanner-win porque as√≠ lo ven√≠as usando
                        script {
                            def scannerHome = tool 'sonar-scanner-win'

                            bat """
                                "${scannerHome}\\bin\\sonar-scanner.bat" ^
                                  -Dsonar.projectKey=frontend-proyecto-final ^
                                  -Dsonar.projectName=frontend-proyecto-final ^
                                  -Dsonar.sources=src ^
                                  -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info ^
                                  -Dsonar.host.url=http://localhost:9000 ^
                                  -Dsonar.login=%sqa_d88c9d69aaa3b92fdfa0cb421dc1a7663c167d31%
                            """
                        }
                    }
                }
            }
        }
    } // <- cierre de stages

    post {
        success {
            echo "‚úÖ Pipeline OK en rama ${env.BRANCH_NAME}"
        }
        failure {
            echo "‚ùå Fall√≥ el pipeline en rama ${env.BRANCH_NAME}"
        }
    }
} // <- cierre del pipeline
