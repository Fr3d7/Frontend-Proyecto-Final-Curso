pipeline {
  agent any

  options {
    timestamps()
    skipDefaultCheckout(true)
  }

  environment {
    NODE_OPTIONS = "--max_old_space_size=4096"
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm
        script {
          echo "üì• Rama detectada: ${env.BRANCH_NAME ?: 'DEV'}"
        }
      }
    }

    stage('Install dependencies') {
      steps {
        echo "üì¶ npm install"
        bat 'npm install'
      }
    }

    stage('Run tests (with coverage)') {
      steps {
        echo "üß™ npm test -- --coverage --watchAll=false --ci --passWithNoTests"
        bat 'npm test -- --coverage --watchAll=false --ci --passWithNoTests'
      }
    }

    stage('Build app') {
      steps {
        echo "üèó npm run build"
        bat '''
          set CI=
          npm run build
        '''
      }
    }

    stage('SonarQube Analysis') {
      steps {
        echo "üîç SonarQube scan"
        withSonarQubeEnv('sonar-local') {
          withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
            script {
              def scannerHome = tool 'sonar-scanner-win'
              def branch = env.BRANCH_NAME ?: 'DEV'
              def pKey   = "frontend-proyecto-final-${branch}"
              def pName  = "frontend-proyecto-final (${branch})"

              bat """
                "${scannerHome}\\bin\\sonar-scanner.bat" ^
                  -Dsonar.projectKey=${pKey} ^
                  -Dsonar.projectName=${pName} ^
                  -Dsonar.sources=src ^
                  -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info ^
                  -Dsonar.login=%sqa_d88c9d69aaa3b92fdfa0cb421dc1a7663c167d31%
              """
            }
          }
        }
      }
    }

    // OPCIONAL: empaquetado / despliegue
    stage('Package artifact') {
      when { expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') } }
      steps { echo "üì¶ (Opcional) Empaquetar artefacto" }
    }

    stage('Deploy to PROD') {
      when { expression { (env.BRANCH_NAME ?: 'DEV') == 'PROD' } }
      steps { echo "üöÄ (Opcional) Despliegue a PROD" }
    }
  }

  post {
    success { echo "‚úÖ Pipeline OK en ${env.BRANCH_NAME ?: 'DEV'}" }
    failure { echo "‚ùå Pipeline FAIL en ${env.BRANCH_NAME ?: 'DEV'}" }
  }
}
