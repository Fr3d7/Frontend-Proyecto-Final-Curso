pipeline {
  agent any

  options {
    timestamps()
    ansiColor('xterm')
    disableConcurrentBuilds()
    // Evita el checkout impl√≠cito duplicado (√∫til en multibranch)
    // skipDefaultCheckout(true)
  }

  environment {
    // CRA no trata warnings como errores si CI est√° vac√≠o (solo durante build)
    CI = ''
    NODE_ENV = 'production'
    // Memoria de Node (opcional)
    NODE_OPTIONS = "--max_old_space_size=4096"
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm
        script {
          // Si NO es multibranch, BRANCH_NAME puede venir null ‚Üí fallback DEV
          env.EFFECTIVE_BRANCH = (env.BRANCH_NAME ?: 'DEV')
          echo "üì• Rama detectada: ${env.EFFECTIVE_BRANCH}"
        }
      }
    }

    stage('Install dependencies') {
      steps {
        echo "üì¶ npm ci (o npm install)"
        bat 'npm ci || npm install'
      }
    }

    stage('Run tests (coverage)') {
      steps {
        echo "üß™ npm test -- --coverage --watchAll=false --ci --passWithNoTests"
        bat 'npm test -- --coverage --watchAll=false --ci --passWithNoTests'
      }
      post {
        unsuccessful { echo "‚ùå Fallaron las pruebas unitarias" }
        success      { echo "‚úÖ Pruebas unitarias OK" }
      }
    }

    stage('Build app') {
      steps {
        echo "üèó  npm run build"
        bat '''
          set CI=
          npm run build
        '''
      }
    }

    // An√°lisis solo en DEV y QA (Community Edition no soporta branch analysis ‚Äúnativo‚Äù)
    stage('SonarQube Analysis') {
      when {
        expression { return (env.EFFECTIVE_BRANCH in ['DEV', 'QA']) }
      }
      steps {
        echo "üîç Enviando an√°lisis a SonarQube‚Ä¶"
        withSonarQubeEnv('sonar-local') {
          withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
            script {
              def scannerHome = tool 'sonar-scanner-win'
              // Un proyecto por rama (para Community Edition)
              def pKey  = "frontend-proyecto-final-${env.EFFECTIVE_BRANCH}"
              def pName = "frontend-proyecto-final (${env.EFFECTIVE_BRANCH})"

              bat """
                "${scannerHome}\\bin\\sonar-scanner.bat" ^
                  -Dsonar.projectKey=${pKey} ^
                  -Dsonar.projectName=${pName} ^
                  -Dsonar.sources=src ^
                  -Dsonar.sourceEncoding=UTF-8 ^
                  -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info ^
                  -Dsonar.login=%sqa_d88c9d69aaa3b92fdfa0cb421dc1a7663c167d31%
              """
            }
          }
        }
      }
    }

    // (Opcional) Esperar Quality Gate en Jenkins
    stage('Quality Gate') {
      when {
        expression { return (env.EFFECTIVE_BRANCH in ['DEV', 'QA']) }
      }
      steps {
        timeout(time: 2, unit: 'MINUTES') {
          // Si no quieres que falle el pipeline pon abortPipeline: false
          waitForQualityGate abortPipeline: false
        }
      }
    }

    // Solo PROD: empaquetado / despliegue
    stage('Package artifact') {
      when { expression { env.EFFECTIVE_BRANCH == 'PROD' } }
      steps {
        echo "üì¶ Archivando artefactos"
        archiveArtifacts artifacts: 'build/**', fingerprint: true, onlyIfSuccessful: true
      }
    }

    stage('Deploy to PROD') {
      when { expression { env.EFFECTIVE_BRANCH == 'PROD' } }
      steps {
        echo "üöÄ Despliegue a PRODUCCI√ìN (placeholder)"
      }
    }
  }

  post {
    success { echo "‚úÖ Pipeline OK en rama ${env.EFFECTIVE_BRANCH}" }
    failure { echo "‚ùå Pipeline FAIL en rama ${env.EFFECTIVE_BRANCH}" }
    always  { echo "üèÅ Fin de ejecuci√≥n" }
  }
}
