pipeline {
  agent any

  environment {
    // Detecta si el job es PROD o DEV por el nombre del job
    IS_PROD = "${env.JOB_BASE_NAME?.toLowerCase().contains('prod')}"
    PROJECT_KEY = "${env.JOB_BASE_NAME?.toLowerCase().contains('prod') ? 'frontend-proyecto-final-PROD' : 'frontend-proyecto-final-DEV'}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: '*/' + (IS_PROD ? 'PROD' : 'DEV')]],
          userRemoteConfigs: [[url: 'https://github.com/Fr3d7/Frontend-Proyecto-Final-Curso.git', credentialsId: 'github-creds']]
        ])
        echo "ðŸ“¦ Proyecto: ${PROJECT_KEY}"
      }
    }

    stage('Install dependencies') {
      steps { bat 'npm ci  || npm install' }
    }

    stage('Run tests (coverage)') {
      steps {
        // No falles si no hay tests, pero genera coverage si existen
        bat 'npm test -- --coverage --watchAll=false --ci --passWithNoTests'
      }
    }

    stage('Build app') {
      steps {
        bat '''
          set CI=
          npm run build
        '''
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
          withSonarQubeEnv('sonar-local') {
            // Si falta coverage/lcov.info solo avisa
            bat 'if not exist coverage\\lcov.info (echo "WARN: no coverage\\lcov.info")'
            bat """
              "C:\\ProgramData\\Jenkins\\.jenkins\\tools\\hudson.plugins.sonar.SonarRunnerInstallation\\sonar-scanner-win\\bin\\sonar-scanner.bat" ^
                -Dsonar.projectKey=${PROJECT_KEY} ^
                -Dsonar.projectName=${PROJECT_KEY} ^
                -Dsonar.projectBaseDir=%WORKSPACE% ^
                -Dsonar.sources=src ^
                -Dsonar.tests=src ^
                -Dsonar.test.inclusions=**/*.test.js,**/*.spec.js ^
                -Dsonar.sourceEncoding=UTF-8 ^
                -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info ^
                -Dsonar.token=%SONAR_TOKEN%
            """
          }
        }
      }
    }

    stage('Quality Gate') {
      steps {
        // MÃ¡s tiempo por si el servidor estÃ¡ ocupado
        timeout(time: 10, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    stage('Package artifact') {
      steps {
        archiveArtifacts artifacts: 'build/**', fingerprint: true
      }
    }

    stage('Deploy to PROD') {
      when { expression { return IS_PROD } }
      steps {
        // EJEMPLO: copiar a una carpeta de publicaciÃ³n/IIS (ajusta ruta)
        bat '''
          if not exist C:\\deploy\\frontend mkdir C:\\deploy\\frontend
          xcopy /E /I /Y build C:\\deploy\\frontend
        '''
      }
    }
  }
}
