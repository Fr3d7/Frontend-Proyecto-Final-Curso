pipeline {
  agent any

  options {
    timestamps()
    ansiColor('xterm')
    disableConcurrentBuilds()
    skipDefaultCheckout(true)
  }

  environment {
    CI = ''
    NODE_ENV = 'production'
    NODE_OPTIONS = "--max_old_space_size=4096"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        script {
          env.EFFECTIVE_BRANCH = (env.BRANCH_NAME ?: 'DEV')
          echo "📥 Rama detectada: ${env.EFFECTIVE_BRANCH}"
        }
      }
    }

    stage('Install dependencies') {
      steps {
        bat 'npm ci || npm install'
      }
    }

    stage('Run tests (coverage)') {
      steps {
        bat 'npm test -- --coverage --watchAll=false --ci --passWithNoTests'
      }
    }

    stage('Build app') {
      steps {
        bat '''
          set CI=
          npm run build
        '''
      }
    }

   stage('SonarQube Analysis') {
  when { expression { env.EFFECTIVE_BRANCH in ['DEV','QA','PROD'] } }
  steps {
    script { scannerHome = tool 'sonar-scanner-win' }  // <-- usa el tool por nombre EXACTO
    // (opcional) no mates el build si no hay coverage; solo avisa
    bat 'if not exist coverage\\lcov.info (echo "WARN: no coverage\\lcov.info")'

    withSonarQubeEnv('sonar-local') {
      bat """
        "${scannerHome}\\bin\\sonar-scanner.bat" ^
          -D"sonar.projectKey=frontend-proyecto-final-${env.EFFECTIVE_BRANCH}" ^
          -D"sonar.projectName=frontend-proyecto-final-${env.EFFECTIVE_BRANCH}" ^
          -D"sonar.projectBaseDir=%WORKSPACE%" ^
          -D"sonar.sources=src" ^
          -D"sonar.tests=src" ^
          -D"sonar.test.inclusions=**/*.test.js,**/*.spec.js" ^
          -D"sonar.sourceEncoding=UTF-8" ^
          -D"sonar.javascript.lcov.reportPaths=coverage/lcov.info" ^
          -D"sonar.login=%SONAR_AUTH_TOKEN%"
      """
    }
  }
}


    stage('Quality Gate') {
      when { expression { env.EFFECTIVE_BRANCH in ['DEV','QA','PROD'] } }
      steps {
        timeout(time: 3, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: false
        }
      }
    }

    stage('Package artifact') {
      when { expression { env.EFFECTIVE_BRANCH == 'PROD' } }
      steps {
        archiveArtifacts artifacts: 'build/**', fingerprint: true, onlyIfSuccessful: true
      }
    }

    stage('Deploy to PROD') {
      when { expression { env.EFFECTIVE_BRANCH == 'PROD' } }
      steps {
        echo '🚀 Deploy placeholder'
      }
    }
  }

  post {
    success { echo "✅ OK ${env.EFFECTIVE_BRANCH}" }
    failure { echo "❌ FAIL ${env.EFFECTIVE_BRANCH}" }
    always  { echo "🏁 Fin" }
  }
}
