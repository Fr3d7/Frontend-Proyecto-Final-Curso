pipeline {
  agent any

  options {
    timestamps()
    ansiColor('xterm')
    disableConcurrentBuilds()
    skipDefaultCheckout(true)   // evita checkout impl√≠cito duplicado
  }

  environment {
    CI = ''                          // CRA: no tratar warnings como errores
    NODE_ENV = 'production'
    NODE_OPTIONS = "--max_old_space_size=4096"
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm
        script {
          // Si no vienes de Multibranch, BRANCH_NAME es null -> usa DEV
          env.EFFECTIVE_BRANCH = (env.BRANCH_NAME ?: 'DEV')
          echo "üì• Rama detectada: ${env.EFFECTIVE_BRANCH}"
        }
      }
    }

    stage('Install dependencies') {
      steps {
        echo "üì¶ npm ci (o npm install)"
        bat 'npm ci || npm install'
      }
    }

    stage('Run tests (coverage)') {
      steps {
        echo "üß™ npm test -- --coverage --watchAll=false --ci --passWithNoTests"
        bat 'npm test -- --coverage --watchAll=false --ci --passWithNoTests'
      }
      post {
        unsuccessful { echo "‚ùå Fallaron las pruebas unitarias" }
        success      { echo "‚úÖ Pruebas unitarias OK" }
      }
    }

    stage('Build app') {
      steps {
        echo "üèó  npm run build"
        bat '''
          set CI=
          npm run build
        '''
      }
    }

    // ---------- SonarQube ----------
   stage('SonarQube Analysis') {
  when { expression { env.EFFECTIVE_BRANCH in ['DEV','QA','PROD'] } }
  steps {
    echo "üîç Enviando an√°lisis a SonarQube‚Ä¶"
    script {
      def scannerHome = tool 'sonar-scanner-win'
    }
    // Asegura cobertura
    bat 'if not exist coverage\\lcov.info (echo "‚ùå No existe coverage\\lcov.info" & dir /s/b coverage & exit /b 1)'

    withSonarQubeEnv('sonar-local') {
      bat """
        "${scannerHome}\\bin\\sonar-scanner.bat" ^
          -D"sonar.projectKey=frontend-proyecto-final-${env.EFFECTIVE_BRANCH}" ^
          -D"sonar.projectName=frontend-proyecto-final-${env.EFFECTIVE_BRANCH}" ^
          -D"sonar.projectBaseDir=%WORKSPACE%" ^
          -D"sonar.sources=src" ^
          -D"sonar.sourceEncoding=UTF-8" ^
          -D"sonar.javascript.lcov.reportPaths=coverage/lcov.info" ^
          -D"sonar.login=%SONAR_AUTH_TOKEN%"
      """
    }

    script {
      def sqUrl = env.SONAR_HOST_URL ?: 'http://localhost:9000'
      def dashboard = "${sqUrl}/dashboard?id=frontend-proyecto-final-${env.EFFECTIVE_BRANCH}"
      createSummary(icon: 'notepad.png',
        text: "<h3>SonarQube</h3><a href='${dashboard}'>Abrir an√°lisis ${env.EFFECTIVE_BRANCH}</a>")
    }
  }
}

    stage('Quality Gate') {
      when { expression { env.EFFECTIVE_BRANCH in ['DEV','QA','PROD'] } }
      steps {
        timeout(time: 2, unit: 'MINUTES') {
          // pon abortPipeline: true si quieres que falle el build al no pasar el gate
          waitForQualityGate abortPipeline: false
        }
      }
    }

    // ---------- Solo PROD ----------
    stage('Package artifact') {
      when { expression { env.EFFECTIVE_BRANCH == 'PROD' } }
      steps {
        echo "üì¶ Archivando artefactos"
        archiveArtifacts artifacts: 'build/**', fingerprint: true, onlyIfSuccessful: true
      }
    }

    stage('Deploy to PROD') {
      when { expression { env.EFFECTIVE_BRANCH == 'PROD' } }
      steps {
        echo "üöÄ Despliegue a PRODUCCI√ìN (placeholder)"
      }
    }
  }

  post {
    success { echo "‚úÖ Pipeline OK en rama ${env.EFFECTIVE_BRANCH}" }
    failure { echo "‚ùå Pipeline FAIL en rama ${env.EFFECTIVE_BRANCH}" }
    always  { echo "üèÅ Fin de ejecuci√≥n" }
  }
}
