pipeline {
  agent any

  options {
    timestamps()
    ansiColor('xterm')
    disableConcurrentBuilds()
    skipDefaultCheckout(true)
  }

  environment {
    CI = ''
    NODE_ENV = 'production'
    NODE_OPTIONS = "--max_old_space_size=4096"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        script {
          env.EFFECTIVE_BRANCH = (env.BRANCH_NAME ?: 'DEV')
          echo "üì• Rama detectada: ${env.EFFECTIVE_BRANCH}"
        }
      }
    }

    stage('Install dependencies') {
      steps {
        bat 'npm ci || npm install'
      }
    }

    stage('Run tests (coverage)') {
      steps {
        bat 'npm test -- --coverage --watchAll=false --ci --passWithNoTests'
      }
    }

    stage('Build app') {
      steps {
        bat '''
          set CI=
          npm run build
        '''
      }
    }

    stage('SonarQube Analysis') {
      when { expression { env.EFFECTIVE_BRANCH in ['DEV','QA','PROD'] } }
      steps {
        script { def scannerHome = tool 'sonar-scanner-win' }
        // asegura que exista el reporte de cobertura
        bat 'if not exist coverage\\lcov.info (echo "No existe coverage\\lcov.info" & dir /s/b coverage & exit /b 1)'

        withSonarQubeEnv('sonar-local') {
          bat """
            "%SONAR_SCANNER_HOME%\\bin\\sonar-scanner.bat" ^
              -D"sonar.projectKey=frontend-proyecto-final-${env.EFFECTIVE_BRANCH}" ^
              -D"sonar.projectName=frontend-proyecto-final-${env.EFFECTIVE_BRANCH}" ^
              -D"sonar.projectBaseDir=%WORKSPACE%" ^
              -D"sonar.sources=src" ^
              -D"sonar.tests=src" ^
              -D"sonar.test.inclusions=**/*.test.js,**/*.spec.js" ^
              -D"sonar.sourceEncoding=UTF-8" ^
              -D"sonar.javascript.lcov.reportPaths=coverage/lcov.info" ^
              -D"sonar.login=%SONAR_AUTH_TOKEN%"
          """
        }
      }
    }

    stage('Quality Gate') {
      when { expression { env.EFFECTIVE_BRANCH in ['DEV','QA','PROD'] } }
      steps {
        timeout(time: 3, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: false
        }
      }
    }

    stage('Package artifact') {
      when { expression { env.EFFECTIVE_BRANCH == 'PROD' } }
      steps {
        archiveArtifacts artifacts: 'build/**', fingerprint: true, onlyIfSuccessful: true
      }
    }

    stage('Deploy to PROD') {
      when { expression { env.EFFECTIVE_BRANCH == 'PROD' } }
      steps {
        echo 'üöÄ Deploy placeholder'
      }
    }
  }

  post {
    success { echo "‚úÖ OK ${env.EFFECTIVE_BRANCH}" }
    failure { echo "‚ùå FAIL ${env.EFFECTIVE_BRANCH}" }
    always  { echo "üèÅ Fin" }
  }
}
