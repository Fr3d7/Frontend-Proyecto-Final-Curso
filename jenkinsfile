pipeline {
  agent any
  options {
    skipDefaultCheckout(true)
    ansiColor('xterm')
    timestamps()
  }
  parameters {
    choice(name: 'TARGET_BRANCH', choices: ['DEV', 'QA', 'PROD'], description: 'Solo para jobs NO multibranch.')
  }
  environment {
    RAW_BRANCH  = "${env.BRANCH_NAME ?: (params.TARGET_BRANCH ?: (env.JOB_BASE_NAME?.toLowerCase()?.contains('prod') ? 'PROD' : (env.JOB_BASE_NAME?.toLowerCase()?.contains('qa') ? 'QA' : 'DEV')))}"
    PIPE_BRANCH = "${RAW_BRANCH.toUpperCase()}"
    PROJECT_KEY = "frontend-proyecto-final-${PIPE_BRANCH}"
    SCANNER_HOME = tool 'sonar-scanner-win'
    REPO_URL    = "https://github.com/Fr3d7/Frontend-Proyecto-Final-Curso.git"
  }
  stages {
    stage('Checkout') {
      steps {
        script {
          echo "üì¶ Proyecto: ${env.PROJECT_KEY} | üßµ Rama destino: ${env.PIPE_BRANCH}"
        }
        checkout([$class: 'GitSCM',
          branches: [[name: "*/${PIPE_BRANCH}"]],
          userRemoteConfigs: [[url: "${env.REPO_URL}", credentialsId: 'github-creds']]
        ])
        // Inicializar y actualizar submodules expl√≠citamente
        bat '''
          git submodule update --init --recursive
        '''
      }
    }
    stage('Install dependencies') {
      steps {
        dir('login-registration') {
          bat 'npm ci || npm install'
        }
      }
    }
    stage('Run tests (coverage)') {
      steps {
        dir('login-registration') {
          bat '''
            set CI=true
            npm test -- --coverage --watchAll=false --ci ^
              --coverageReporters=lcov ^
              --collectCoverageFrom="src/**/*.{js,jsx,ts,tsx}" ^
              --testPathIgnorePatterns="/node_modules/","/build/"
          '''
        }
      }
    }
    stage('Verify coverage file') {
      steps {
        powershell '''
          $coveragePath = "login-registration/coverage/lcov.info"
          if (-not (Test-Path $coveragePath)) { 
            Write-Error "No se gener√≥ $coveragePath"; 
            exit 1 
          }
          $s = (Get-Item $coveragePath).Length
          if ($s -lt 500) { 
            Write-Error "LCOV vac√≠o o muy peque√±o ($s bytes)"; 
            exit 1 
          }
          Write-Output "LCOV size=$s bytes"
          # Copiar coverage a ra√≠z para SonarQube
          if (-not (Test-Path "coverage")) {
            New-Item -ItemType Directory -Path "coverage" -Force | Out-Null
          }
          Copy-Item -Path $coveragePath -Destination "coverage/lcov.info" -Force
        '''
      }
    }
    stage('Build app') {
      steps {
        dir('login-registration') {
          bat '''
            set CI=
            npm run build
          '''
        }
      }
    }
    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
          withSonarQubeEnv('sonar-local') {
            bat """
              "%SCANNER_HOME%\\bin\\sonar-scanner.bat" ^
                -Dsonar.projectKey=${PROJECT_KEY} ^
                -Dsonar.projectName=${PROJECT_KEY} ^
                -Dsonar.projectVersion=${BUILD_NUMBER} ^
                -Dsonar.projectBaseDir=%WORKSPACE% ^
                -Dsonar.sources=login-registration/src ^
                -Dsonar.tests=login-registration/src ^
                -Dsonar.test.inclusions=**/*.test.{js,jsx,ts,tsx},**/__tests__/** ^
                -Dsonar.sourceEncoding=UTF-8 ^
                -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info ^
                -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info ^
                -Dsonar.token=%SONAR_TOKEN%
            """
          }
        }
      }
    }
    stage('Quality Gate') {
      steps {
        timeout(time: 10, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }
    stage('Package artifact') {
      steps {
        dir('login-registration') {
          archiveArtifacts artifacts: 'build/**', fingerprint: true
        }
      }
    }
    stage('Deploy') {
      when { expression { return env.PIPE_BRANCH == 'QA' || env.PIPE_BRANCH == 'PROD' } }
      steps {
        script {
          def deployPath = (env.PIPE_BRANCH == 'PROD') ? 'C:\\deploy\\frontend' : 'C:\\deploy\\frontend-qa'
          dir('login-registration') {
            bat """
              if not exist ${deployPath} mkdir ${deployPath}
              xcopy /E /I /Y build ${deployPath}
            """
          }
          echo "üöÄ Desplegado a ${deployPath} para rama ${env.PIPE_BRANCH}"
        }
      }
    }
  }
  post {
    always {
      echo "üèÅ Fin | Rama: ${env.PIPE_BRANCH} | Build: #${env.BUILD_NUMBER}"
    }
  }
}
