pipeline {
  agent any
<<<<<<< HEAD

  options {
    timestamps()
    ansiColor('xterm')
    disableConcurrentBuilds()
    skipDefaultCheckout(true)   // evita checkout impl√≠cito duplicado
  }

  environment {
    CI = ''                          // CRA: no tratar warnings como errores
    NODE_ENV = 'production'
    NODE_OPTIONS = "--max_old_space_size=4096"
  }

=======
  options {
    timestamps()
    ansiColor('xterm')
    disableConcurrentBuilds()
  }

  environment {
    // Para que CRA no trate warnings como errores
    CI = ''
    NODE_ENV = 'production'
    // Si vas a usar despliegue a IIS, configura esta ruta:
    // DEPLOY_PATH = 'C:\\inetpub\\wwwroot\\miapp'
  }

>>>>>>> a467845 (chore: add jenkinsfile for PROD)
  stages {

    stage('Checkout') {
      steps {
<<<<<<< HEAD
        checkout scm
        script {
          // Si no vienes de Multibranch, BRANCH_NAME es null -> usa DEV
          env.EFFECTIVE_BRANCH = (env.BRANCH_NAME ?: 'DEV')
          echo "üì• Rama detectada: ${env.EFFECTIVE_BRANCH}"
        }
=======
        script {
          def branch = env.BRANCH_NAME ?: 'DEV'
          echo "üì• Haciendo checkout de la rama ${branch}"
        }
        checkout scm
>>>>>>> a467845 (chore: add jenkinsfile for PROD)
      }
    }

    stage('Install dependencies') {
      steps {
<<<<<<< HEAD
        echo "üì¶ npm ci (o npm install)"
=======
        echo "üì¶ Instalando dependencias NPM..."
>>>>>>> a467845 (chore: add jenkinsfile for PROD)
        bat 'npm ci || npm install'
      }
    }

<<<<<<< HEAD
    stage('Run tests (coverage)') {
      steps {
        echo "üß™ npm test -- --coverage --watchAll=false --ci --passWithNoTests"
        bat 'npm test -- --coverage --watchAll=false --ci --passWithNoTests'
=======
    stage('Run tests') {
      steps {
        echo "üß™ Corriendo tests (Jest/RTL)..."
        bat 'npm test -- --watchAll=false --ci --passWithNoTests'
>>>>>>> a467845 (chore: add jenkinsfile for PROD)
      }
      post {
        unsuccessful { echo "‚ùå Fallaron las pruebas unitarias" }
        success      { echo "‚úÖ Pruebas unitarias OK" }
      }
    }

    stage('Build app') {
      steps {
<<<<<<< HEAD
        echo "üèó  npm run build"
        bat '''
          set CI=
          npm run build
=======
        echo "üèó  Construyendo la app React (npm run build, ignorando warnings)..."
        // En Windows, limpiamos CI s√≥lo en este paso
        bat '''
        set CI=
        npm run build
>>>>>>> a467845 (chore: add jenkinsfile for PROD)
        '''
      }
    }

<<<<<<< HEAD
    // ---------- SonarQube ----------
   stage('SonarQube Analysis') {
  when { expression { env.EFFECTIVE_BRANCH in ['DEV','QA','PROD'] } }
  steps {
    echo "üîç Enviando an√°lisis a SonarQube‚Ä¶"
    script {
      def scannerHome = tool 'sonar-scanner-win'
    }
    // Asegura cobertura
    bat 'if not exist coverage\\lcov.info (echo "‚ùå No existe coverage\\lcov.info" & dir /s/b coverage & exit /b 1)'

    withSonarQubeEnv('sonar-local') {
      bat """
        "${scannerHome}\\bin\\sonar-scanner.bat" ^
          -D"sonar.projectKey=frontend-proyecto-final-${env.EFFECTIVE_BRANCH}" ^
          -D"sonar.projectName=frontend-proyecto-final-${env.EFFECTIVE_BRANCH}" ^
          -D"sonar.projectBaseDir=%WORKSPACE%" ^
          -D"sonar.sources=src" ^
          -D"sonar.sourceEncoding=UTF-8" ^
          -D"sonar.javascript.lcov.reportPaths=coverage/lcov.info" ^
          -D"sonar.login=%SONAR_AUTH_TOKEN%"
      """
    }

    script {
      def sqUrl = env.SONAR_HOST_URL ?: 'http://localhost:9000'
      def dashboard = "${sqUrl}/dashboard?id=frontend-proyecto-final-${env.EFFECTIVE_BRANCH}"
      createSummary(icon: 'notepad.png',
        text: "<h3>SonarQube</h3><a href='${dashboard}'>Abrir an√°lisis ${env.EFFECTIVE_BRANCH}</a>")
    }
  }
}

    stage('Quality Gate') {
      when { expression { env.EFFECTIVE_BRANCH in ['DEV','QA','PROD'] } }
      steps {
        timeout(time: 2, unit: 'MINUTES') {
          // pon abortPipeline: true si quieres que falle el build al no pasar el gate
          waitForQualityGate abortPipeline: false
=======
    /************ SOLO DEV / QA: An√°lisis SonarQube ************/
    stage('SonarQube Analysis') {
      when {
        anyOf { branch 'DEV'; branch 'QA' }
      }
      steps {
        echo "üîç Enviando an√°lisis a SonarQube..."
        withSonarQubeEnv('sonar-local') {
          withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
            script {
              def scannerHome = tool 'sonar-scanner-win'
              bat """
                "${scannerHome}\\bin\\sonar-scanner.bat" ^
                  -Dsonar.projectKey=frontend-proyecto-final ^
                  -Dsonar.projectName=frontend-proyecto-final ^
                  -Dsonar.sources=src ^
                  -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info ^
                  -Dsonar.host.url=http://localhost:9000 ^
                  -Dsonar.login=%sqa_d88c9d69aaa3b92fdfa0cb421dc1a7663c167d31%
              """
            }
          }
>>>>>>> a467845 (chore: add jenkinsfile for PROD)
        }
      }
    }

<<<<<<< HEAD
    // ---------- Solo PROD ----------
    stage('Package artifact') {
      when { expression { env.EFFECTIVE_BRANCH == 'PROD' } }
      steps {
        echo "üì¶ Archivando artefactos"
=======
    /************ SOLO PROD: Empaquetado y Despliegue ************/
    stage('Package artifact') {
      when { branch 'PROD' }
      steps {
        echo "üì¶ Archivando artefactos de build"
        // Si quieres adem√°s un ZIP del build:
        // powershell '''
        //   if (Test-Path build.zip) { Remove-Item build.zip -Force }
        //   Compress-Archive -Path build\\* -DestinationPath build.zip
        // '''
        // archiveArtifacts artifacts: 'build.zip', fingerprint: true
>>>>>>> a467845 (chore: add jenkinsfile for PROD)
        archiveArtifacts artifacts: 'build/**', fingerprint: true, onlyIfSuccessful: true
      }
    }

    stage('Deploy to PROD') {
<<<<<<< HEAD
      when { expression { env.EFFECTIVE_BRANCH == 'PROD' } }
      steps {
        echo "üöÄ Despliegue a PRODUCCI√ìN (placeholder)"
=======
      when { branch 'PROD' }
      steps {
        echo "üöÄ Desplegando a PRODUCCI√ìN"

        // ===== Opci√≥n A: Despliegue a IIS local (Windows) =====
        // Descomenta si usas IIS y configura DEPLOY_PATH arriba.
        // powershell """
        //   \$dest = '${env.DEPLOY_PATH}'
        //   if (!(Test-Path \$dest)) { New-Item -ItemType Directory -Force -Path \$dest | Out-Null }
        //   Get-ChildItem -Path \$dest -Force | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        //   Copy-Item -Path 'build\\*' -Destination \$dest -Recurse -Force
        // """

        // ===== Opci√≥n B: Despliegue por SSH a Linux (Nginx) =====
        // Requiere plugin SSH + credencial ID 'ssh-prod' y ajustar host/usuario/ruta
        // sshagent(credentials: ['ssh-prod']) {
        //   bat 'plink -batch user@server "rm -rf /var/www/miapp/*"'
        //   bat 'pscp -batch -r build\\* user@server:/var/www/miapp/'
        //   // Reinicio / reload de servicio si aplica
        //   // bat 'plink -batch user@server "sudo systemctl reload nginx"'
        // }
>>>>>>> a467845 (chore: add jenkinsfile for PROD)
      }
    }
  }

  post {
<<<<<<< HEAD
    success { echo "‚úÖ Pipeline OK en rama ${env.EFFECTIVE_BRANCH}" }
    failure { echo "‚ùå Pipeline FAIL en rama ${env.EFFECTIVE_BRANCH}" }
    always  { echo "üèÅ Fin de ejecuci√≥n" }
=======
    success {
      script {
        def branch = env.BRANCH_NAME ?: 'DEV'
        echo "‚úÖ Pipeline OK en rama ${branch}"
      }
    }
    failure {
      script {
        def branch = env.BRANCH_NAME ?: 'DEV'
        echo "‚ùå Fall√≥ el pipeline en rama ${branch}"
      }
    }
    always {
      echo "üèÅ Fin de ejecuci√≥n"
    }
>>>>>>> a467845 (chore: add jenkinsfile for PROD)
  }
}
